import React, { useState, useEffect } from "react";
import { Fencer } from "@/entities/Fencer";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Badge } from "@/components/ui/badge";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Avatar, AvatarFallback } from "@/components/ui/avatar";
import { Search, Plus, Filter, Sword } from "lucide-react";

const weaponColors = {
  foil: "bg-blue-100 text-blue-800 border-blue-200",
  epee: "bg-purple-100 text-purple-800 border-purple-200",
  sabre: "bg-red-100 text-red-800 border-red-200"
};

const yearColors = {
  Freshman: "bg-green-100 text-green-800",
  Sophomore: "bg-yellow-100 text-yellow-800", 
  Junior: "bg-orange-100 text-orange-800",
  Senior: "bg-red-100 text-red-800",
  Graduate: "bg-purple-100 text-purple-800"
};

export default function Team() {
  const [fencers, setFencers] = useState([]);
  const [searchTerm, setSearchTerm] = useState("");
  const [weaponFilter, setWeaponFilter] = useState("all");
  const [isLoading, setIsLoading] = useState(true);

  useEffect(() => {
    loadFencers();
  }, []);

  const loadFencers = async () => {
    setIsLoading(true);
    const data = await Fencer.list('-created_date');
    setFencers(data);
    setIsLoading(false);
  };

  const filteredFencers = fencers.filter(fencer => {
    const matchesSearch = fencer.name.toLowerCase().includes(searchTerm.toLowerCase());
    const matchesWeapon = weaponFilter === "all" || fencer.weapon === weaponFilter;
    return matchesSearch && matchesWeapon;
  });

  const calculateOverallRating = (stats) => {
    if (!stats) return 0;
    return Math.round((
      (stats.technique || 0) + 
      (stats.speed || 0) + 
      (stats.endurance || 0) + 
      (stats.mental_focus || 0) + 
      (stats.tactical_awareness || 0)
    ) / 5);
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-50 via-white to-slate-50 p-6">
      <div className="max-w-7xl mx-auto">
        {/* Header */}
        <div className="flex flex-col md:flex-row justify-between items-start md:items-center mb-8 gap-4">
          <div>
            <h1 className="text-4xl font-bold text-slate-900 mb-2">Team Roster</h1>
            <p className="text-slate-600 text-lg">Manage your fencers and track their development</p>
          </div>
          <Button className="bg-gradient-to-r from-amber-500 to-amber-600 hover:from-amber-600 hover:to-amber-700 shadow-lg">
            <Plus className="w-4 h-4 mr-2" />
            Add Fencer
          </Button>
        </div>

        {/* Filters */}
        <Card className="mb-8 border-0 shadow-lg">
          <CardContent className="p-6">
            <div className="flex flex-col md:flex-row gap-4">
              <div className="relative flex-1">
                <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-slate-400 w-4 h-4" />
                <Input
                  placeholder="Search fencers..."
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                  className="pl-10 border-slate-200 focus:border-amber-500 focus:ring-amber-500"
                />
              </div>
              <div className="flex gap-2">
                <Button
                  variant={weaponFilter === "all" ? "default" : "outline"}
                  onClick={() => setWeaponFilter("all")}
                  className="flex items-center gap-2"
                >
                  <Filter className="w-4 h-4" />
                  All Weapons
                </Button>
                <Button
                  variant={weaponFilter === "foil" ? "default" : "outline"}
                  onClick={() => setWeaponFilter("foil")}
                  className="text-blue-600 border-blue-200 hover:bg-blue-50"
                >
                  Foil
                </Button>
                <Button
                  variant={weaponFilter === "epee" ? "default" : "outline"}
                  onClick={() => setWeaponFilter("epee")}
                  className="text-purple-600 border-purple-200 hover:bg-purple-50"
                >
                  Épée
                </Button>
                <Button
                  variant={weaponFilter === "sabre" ? "default" : "outline"}
                  onClick={() => setWeaponFilter("sabre")}
                  className="text-red-600 border-red-200 hover:bg-red-50"
                >
                  Sabre
                </Button>
              </div>
            </div>
          </CardContent>
        </Card>

        {/* Team Grid */}
        {filteredFencers.length === 0 ? (
          <Card className="border-0 shadow-lg">
            <CardContent className="p-12 text-center">
              <Sword className="w-16 h-16 mx-auto mb-4 text-slate-300" />
              <h3 className="text-xl font-bold text-slate-900 mb-2">No fencers found</h3>
              <p className="text-slate-500 mb-6">Start building your team by recruiting talented fencers</p>
              <Button className="bg-gradient-to-r from-amber-500 to-amber-600 hover:from-amber-600 hover:to-amber-700">
                <Plus className="w-4 h-4 mr-2" />
                Recruit First Fencer
              </Button>
            </CardContent>
          </Card>
        ) : (
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {filteredFencers.map((fencer) => (
              <Card key={fencer.id} className="border-0 shadow-lg hover:shadow-xl transition-all duration-300 group">
                <CardHeader className="pb-4">
                  <div className="flex items-start justify-between">
                    <div className="flex items-center gap-3">
                      <Avatar className="w-12 h-12">
                        <AvatarFallback className="bg-gradient-to-r from-amber-400 to-amber-500 text-white font-bold text-lg">
                          {fencer.name.split(' ').map(n => n[0]).join('')}
                        </AvatarFallback>
                      </Avatar>
                      <div>
                        <h3 className="font-bold text-slate-900 text-lg">{fencer.name}</h3>
                        <p className="text-slate-600 text-sm">Age {fencer.age}</p>
                      </div>
                    </div>
                    <div className="text-right">
                      <div className="text-2xl font-bold text-amber-600">
                        {calculateOverallRating(fencer.stats)}
                      </div>
                      <div className="text-xs text-slate-500">OVR</div>
                    </div>
                  </div>
                </CardHeader>
                
                <CardContent>
                  <div className="space-y-4">
                    {/* Badges */}
                    <div className="flex gap-2 flex-wrap">
                      <Badge className={weaponColors[fencer.weapon]}>
                        {fencer.weapon}
                      </Badge>
                      <Badge variant="secondary" className={yearColors[fencer.year]}>
                        {fencer.year}
                      </Badge>
                    </div>

                    {/* Stats */}
                    <div className="space-y-2">
                      <div className="flex justify-between text-sm">
                        <span className="text-slate-600">Record</span>
                        <span className="font-medium">{fencer.wins || 0}-{fencer.losses || 0}</span>
                      </div>
                      <div className="flex justify-between text-sm">
                        <span className="text-slate-600">GPA</span>
                        <span className="font-medium">{fencer.academic_gpa?.toFixed(2) || "N/A"}</span>
                      </div>
                      <div className="flex justify-between text-sm">
                        <span className="text-slate-600">Morale</span>
                        <div className="flex items-center gap-2">
                          <span className="font-medium">{fencer.morale || 75}%</span>
                          <div className="w-12 bg-slate-200 rounded-full h-1.5">
                            <div 
                              className="bg-emerald-500 h-1.5 rounded-full" 
                              style={{ width: `${fencer.morale || 75}%` }}
                            />
                          </div>
                        </div>
                      </div>
                    </div>

                    {/* Key Stats */}
                    {fencer.stats && (
                      <div className="grid grid-cols-2 gap-2 text-xs">
                        <div className="flex justify-between">
                          <span className="text-slate-500">Technique</span>
                          <span className="font-medium">{fencer.stats.technique || 0}</span>
                        </div>
                        <div className="flex justify-between">
                          <span className="text-slate-500">Speed</span>
                          <span className="font-medium">{fencer.stats.speed || 0}</span>
                        </div>
                        <div className="flex justify-between">
                          <span className="text-slate-500">Endurance</span>
                          <span className="font-medium">{fencer.stats.endurance || 0}</span>
                        </div>
                        <div className="flex justify-between">
                          <span className="text-slate-500">Focus</span>
                          <span className="font-medium">{fencer.stats.mental_focus || 0}</span>
                        </div>
                      </div>
                    )}

                    {/* Action Button */}
                    <Button variant="outline" className="w-full mt-4 group-hover:border-amber-500 group-hover:text-amber-700 transition-colors duration-300">
                      View Details
                    </Button>
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>
        )}
      </div>
    </div>
  );
}
